
<div class="container-fluid w-75">
  <h3 class="mt-5 mb-3 mx-auto">
    Search Results for {{capitalize searchName}}: {{searchResult.length}}
  </h3>
  {{#if searchResult}}
    <div class="row no-gutters justify-content-between">
      {{#each searchResult}}
        <div class=" col-auto mb-4 ml-2">
          <div class="card" style="width: 24rem; min-width:24rem">
            <img src="#" class="card-img-top" alt="..." />
            <div class="card-body">
              <a class="card-text stretched-link" href="/item/{{itemID}}"></a>
              <h4 class="card-title">
                <span>
                  {{itemName}}
                </span>
              </h4>
              <h5>
                <span>
                  Price:
                  ${{distanceFixed itemPrice}}
                </span>
              </h5>
              <p class="card-text mb-2">
                <span>
                  {{itemDescription}}
                </span>
              </p>
              <h5 class="card-text">
                {{{sellBadges sellType }}}
              </h5>
              <p class="text-muted">
                <span>
                  {{itemCity}}, 
                  {{itemState}}
                  {{itemZip}}
                  ({{distanceFixed distanceFromSearch}}
                  Mi)
                </span>
              </p>
            </div>
          </div>
        </div>
      {{else}}
        <h3>
          No items
        </h3>
      {{/each}}
    </div>
  {{/if}}
   {{#if searchResult}}
     <div id="mapid"></div>
  {{/if}}
</div>
</br>  
</div>


<script>
function showLocation(position) {
  var myLatitude = position.coords.latitude;
  var mylongitude = position.coords.longitude;
  
  {{!-- getting the data json data and cleaning escaped data --}}
  var data = "{{json searchResult}}"
  data = data.replace(/(&quot\;)/g,"\"")
  let dataArray = JSON.parse(data);
  console.log(dataArray)

  {{!-- set up Map --}}
  var map = L.map('mapid').setView([myLatitude, mylongitude], 7.5);
  L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

  {{!-- L.marker([myLatitude, mylongitude]).addTo(map) 
    .bindPopup("you are here" + '<br>')
    .openPopup(); --}}
  


  var redMarker = L.AwesomeMarkers.icon({
    icon: 'coffee',
    markerColor: 'red'
  });
      
  L.marker([myLatitude, mylongitude], {icon: redMarker}).addTo(map)
    .bindPopup("Your Location" + '<br>')
    .openPopup();

  var colors = ['blue', 'green', 'purple', 'orange', 'beige', 'darkblue', 'cadetblue', 'darkpurple', 'white', 'pink', 'lightblue', 'lightgreen', 'gray', 'black', 'lightgray'];
  
  console.log(redMarker)
  dataArray.forEach(function(entry){
    var name = entry.itemName
    var address = entry.itemAddress + "\n" + entry.itemCity + "," + entry.itemState
    var randomItem = colors[Math.floor(Math.random()*colors.length)];
    console.log(randomItem);
    var colorMarker = L.AwesomeMarkers.icon({
    markerColor: randomItem
    });

    L.marker([entry.itemLat, entry.itemLong], {icon: colorMarker} ).addTo(map) 
      .bindPopup(entry.itemName + '<br>' + address)
      .openPopup();
    });
}


function errorHandler(err) {
  if(err.code == 1) {
      alert("Error: Access is denied!");
  } else if( err.code == 2) {
      alert("Error: Position is unavailable!");
  }
}

if(navigator.geolocation) {       
    // timeout at 60000 milliseconds (60 seconds)
    var options = {timeout:60000};
    navigator.geolocation.getCurrentPosition(showLocation, errorHandler, options);
}






  
</script>
<script src="https://twitter.github.io/typeahead.js/js/handlebars.js"></script>
 